# This is a YAML formattted file
# Testing otel collection with opam extension enabled using open-telemetry-collector-contrib image

# image location
image:
  # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
  repository: harishrajagopal/otel-collector
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.2.0"
  # When digest is set to a non-empty value, images will be pulled by digest (regardless of tag value).
  digest: ""
imagePullSecrets: []

# OpenTelemetry Collector executable
command:
  name: /app/otel-collector
  extraArgs: []

livenessProbe:
  initialDelaySeconds: 5

readinessProbe:
  initialDelaySeconds: 5

# Mode of deployment
mode: deployment

# Cluster role and binding to be able to scrap k8s metrics
clusterRole:
  create: true
  name: prom-admin

  rules:
  - apiGroups: [""]
    resources: ["events","namespaces", "namespaces/status", "pods", "pods/status", "nodes", "nodes/spec", "endpoints", "services", "replicationcontrollers", "replicationcontrollers/status", "resourcequotas"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["extensions"]
    resources: ["daemonsets", "deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["get", "list", "watch"]

  - nonResourceURLs:
    - /metrics
    verbs:
    - get

  clusterRoleBinding:
    name: prom-rbac

# OTEL pipeline configuration
# Scrape required data using prometheus
# Filter metrics needed using metrics transform processor
# Cumulative to delta transformer?
# Export to logzio
config:  
  extensions:
    health_check: {}
    memory_ballast: {}
    opamp:
      server:
        ws:
          endpoint: ws://opamp:4320/v1/opamp
          tls:
            insecure: true
  receivers:
    otlp:
      protocols:
        grpc:
    prometheus:
      config:
          scrape_configs:

            - job_name: 'kubernetes-apiservers'
              sample_limit: 100000
              scrape_interval: 5m
              # Default to scraping over https. If required, just disable this or change to
              # `http`.
              scheme: https
              
              kubernetes_sd_configs:
              - role: endpoints
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              metric_relabel_configs:
              - source_labels: [__name__]
                regex: apiserver_request_total|apiserver_request_duration_seconds_bucket|apiserver_request_duration_seconds_sum|apiserver_request_duration_seconds_count
                action: keep


              relabel_configs:
              - source_labels: [__meta_kubernetes_endpoint_port_protocol]
                action: replace
                target_label: instance
            
            - job_name: 'kubernetes-nodes-hnr16'
              sample_limit: 100000
              scrape_interval: 5m
              # Default to scraping over https. If required, just disable this or change to
              # `http`.
              scheme: https
              
              kubernetes_sd_configs:
              - role: node
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              metric_relabel_configs:
              - source_labels: [__name__]
                regex: node_collector_zone_.*
                action: keep
              
              relabel_configs:
              - action: replace
                source_labels: [__meta_kubernetes_node_name]
                target_label: instance
                
  processors:
    memory_limiter:
      check_interval: 1s
      limit_mib: 2000
    
    cumulativetodelta:
        # Convert cumulative sum or histogram metrics to delta
        # if and only if 'metric' is in the name
        include:
            metrics:
                - "apiserver_request_duration_seconds*"
            match_type: regexp

    metricstransform:
      transforms:
        - action: update
          include: apiserver_request_total
          match_type: strict
          aggregation_type: sum
          operations:
            - action: aggregate_labels
              label_set:
                - cluster_name
                - code
                - verb
              aggregation_type: sum
        - action: update
          include: apiserver_request_duration_seconds.*
          match_type: regexp
          aggregation_type: sum
          operations:
            - action: aggregate_labels
              label_set:
                - cluster_name
                - verb
                - le
              aggregation_type: sum
        - action: update
          include: apiserver_request_duration_seconds.*
          match_type: regexp
          operations:
            - action: delete_label_value
              label: verb
              label_value: APPLY
            - action: delete_label_value
              label: verb
              label_value: DELETE
            - action: delete_label_value
              label: verb
              label_value: LIST
            - action: delete_label_value
              label: verb
              label_value: PATCH

  exporters:
    debug:
      verbosity: detailed
      sampling_initial: 5
      sampling_thereafter: 200
  service:
#    telemetry:
#      logs:
#        level: "debug"
    extensions:
      - health_check
      - memory_ballast
      - opamp
    pipelines:
      metrics:
        receivers: [prometheus]
        processors: [memory_limiter, metricstransform]
        exporters: [debug]
