# This is a YAML formattted file
# Testing otel collection with opam extension enabled using open-telemetry-collector-contrib image

# image location
image:
  # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
  repository: harishrajagopal/otel-collector
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.0"
  # When digest is set to a non-empty value, images will be pulled by digest (regardless of tag value).
  digest: ""
imagePullSecrets: []

# OpenTelemetry Collector executable
command:
  name: /app/otel-collector
  extraArgs: []

livenessProbe:
  initialDelaySeconds: 5

readinessProbe:
  initialDelaySeconds: 5

# Mode of deployment
mode: deployment

# Cluster role and binding to be able to scrap k8s metrics
# clusterRole:
#   create: true
#   name: prom-admin

#   rules:
#   - apiGroups: [""]
#     resources: ["events","namespaces", "namespaces/status", "pods", "pods/status", "nodes", "nodes/spec", "endpoints", "services", "replicationcontrollers", "replicationcontrollers/status", "resourcequotas"]
#     verbs: ["get", "watch", "list"]
#   - apiGroups: ["apps"]
#     resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
#     verbs: ["get", "watch", "list"]
#   - apiGroups: ["extensions"]
#     resources: ["daemonsets", "deployments", "replicasets"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: ["batch"]
#     resources: ["jobs", "cronjobs"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: ["autoscaling"]
#     resources: ["horizontalpodautoscalers"]
#     verbs: ["get", "list", "watch"]

#   - nonResourceURLs:
#     - /metrics
#     verbs:
#     - get

#   clusterRoleBinding:
#     name: prom-rbac

# OTEL pipeline configuration
# Scrape required data using prometheus
# Filter metrics needed using metrics transform processor
# Cumulative to delta transformer?
# Export to logzio
config:  
  extensions:
    health_check: {}
    memory_ballast: {}
    opamp:
      server:
        ws:
          endpoint: ws://opamp:4320/v1/opamp
          tls:
            insecure: true
    headers_setter:
      headers:
        - action: insert
          key: routing-key
          from_context: routing-key
 
  receivers:
    otlp:
      protocols:
        grpc:
          include_metadata: true
        http:
          include_metadata: true

  processors:
    memory_limiter:
      check_interval: 1s
      limit_mib: 2000
    routing:
      from_attribute: routing-key
      table:
      - value: abc123
        exporters: [otlp]    

  exporters:
    debug:
      verbosity: detailed
      sampling_initial: 5
      sampling_thereafter: 200
    otlp:
      endpoint: 10.10.2.10:4317
      tls:
        insecure: true

  service:
#    telemetry:
#      logs:
#        level: "debug"
    extensions:
      - health_check
      - memory_ballast
      - opamp
      - headers_setter
    pipelines:
      metrics:
        receivers: [otlp]
        processors: [routing]
        exporters: [debug, otlp]
